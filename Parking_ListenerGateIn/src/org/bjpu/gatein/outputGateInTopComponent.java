/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bjpu.gatein;

import java.io.IOException;
import javax.swing.text.DefaultCaret;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.bjpu.gatein//outputGateIn//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "outputGateInTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.bjpu.gatein.outputGateInTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "Server Monitor",
        preferredID = "outputGateInTopComponent"
)
@Messages({
    "CTL_outputGateInAction=outputGateIn",
    "CTL_outputGateInTopComponent=outputGateIn Window",
    "HINT_outputGateInTopComponent=This is a outputGateIn window"
})
public final class outputGateInTopComponent extends TopComponent {

    private Application apps;
    private WriterOutput outputMonitor;

    public outputGateInTopComponent() {
        initComponents();
        setName("Window Gate in");
        setToolTipText("Smart Parking - Gate ");

        init();
    }

    public void init() {
        DefaultCaret caret = (DefaultCaret) txtOutputListener.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        apps = new Application();
        outputMonitor = new WriterOutput();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtOutputListener = new javax.swing.JTextArea();
        buttonStart = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(outputGateInTopComponent.class, "outputGateInTopComponent.border.title"))); // NOI18N

        txtOutputListener.setColumns(20);
        txtOutputListener.setRows(5);
        jScrollPane1.setViewportView(txtOutputListener);

        org.openide.awt.Mnemonics.setLocalizedText(buttonStart, org.openide.util.NbBundle.getMessage(outputGateInTopComponent.class, "outputGateInTopComponent.buttonStart.text")); // NOI18N
        buttonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(buttonStart))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonStart))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartActionPerformed
        try {
            apps.createConnection();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        outputMonitor.setOutputMonitoring("Server Started....");
        outputMonitor.setOutputMonitoring("Listening to client request....");
        if (apps.getConnection() != null) {
            buttonStart.setText("Server Started");
            buttonStart.setEnabled(false);
        }
    }//GEN-LAST:event_buttonStartActionPerformed
    public String getOutputMonitoring() {
        return txtOutputListener.getText();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonStart;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea txtOutputListener;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
